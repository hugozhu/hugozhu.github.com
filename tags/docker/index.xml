<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on All about Raspberry Pi</title>
    <link>https://blog.hugozhu.site/tags/docker/</link>
    <description>Recent content in Docker on All about Raspberry Pi</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>hugozhu@gmail.com (Hugo Zhu)</managingEditor>
    <webMaster>hugozhu@gmail.com (Hugo Zhu)</webMaster>
    <lastBuildDate>Sun, 07 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.hugozhu.site/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用acme_docker自动更新免费域名证书</title>
      <link>https://blog.hugozhu.site/post/2024/76-acme-docker-auto-uptime/</link>
      <pubDate>Sun, 07 Jul 2024 00:00:00 +0000</pubDate><author>hugozhu@gmail.com (Hugo Zhu)</author>
      <guid>https://blog.hugozhu.site/post/2024/76-acme-docker-auto-uptime/</guid>
      <description>问题和解决方案 免费域名证书需要三个月更新一次。 解决方案：apisix, docker, acme.sh, dnspod&#xA;Apisix https://apisix.org Apisix是优秀的开源网关，更新证书不需要重启服务，可以作为所有服务的网关&#xA;Acme Docker https://github.com/hugozhu/acme_docker/blob/main/README.md 项目已配置好使用docker来更新证书并生成apisix的json&#xA;docker-compose.yaml&#xA;version: &amp;#34;3&amp;#34; services: acme: image: neilpang/acme.sh container_name: acme #restart: always command: daemon env_file: - .env volumes: - ./cert:/acme.sh 重新申请免费证书 docker-compose up -d docker exec acme acme.sh --set-default-ca --server letsencrypt docker exec acme acme.sh --issue --dns dns_dp -d hugozhu.site -d *.hugozhu.site -d *.go.hugozhu.site docker-compose down cat hugozhu.site.json apisix上更新证书 data=$( cat &amp;#34;hugozhu.site.json&amp;#34; ) curl &amp;#39;http://127.0.0.1:9180/apisix/admin/ssls/1&amp;#39; \ -H &amp;#34;X-API-KEY: $API_KEY&amp;#34; -X PUT -d &amp;#34;$data&amp;#34;` </description>
    </item>
    <item>
      <title>用Gitlab Runner来打包并上传Harbor</title>
      <link>https://blog.hugozhu.site/post/2022/71-gitlab-runner-using-docker-build/</link>
      <pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate><author>hugozhu@gmail.com (Hugo Zhu)</author>
      <guid>https://blog.hugozhu.site/post/2022/71-gitlab-runner-using-docker-build/</guid>
      <description>https://docs.gitlab.com/ee/ci/docker/using_docker_build.html&#xA;docker-compose.yaml version: &amp;#39;3.6&amp;#39; services: gitlab-runner: image: &amp;#39;gitlab/gitlab-runner:latest&amp;#39; restart: always volumes: - ./config:/etc/gitlab-runner - /data/gitlab-runner:/home/gitlab-runner ./config/config.toml /root/.docker/config.json 里放docker hub的授权token&#xA;concurrent = 1 check_interval = 0 [session_server] session_timeout = 1800 [[runners]] name = &amp;#34;Dev1 Docker Runner&amp;#34; url = &amp;#34;https://gitlab.xxxx.com/&amp;#34; token = &amp;#34;xxxxxxxxxxxx&amp;#34; executor = &amp;#34;docker&amp;#34; [runners.docker] tls_verify = false image = &amp;#34;docker:20.10.15&amp;#34; privileged = false disable_entrypoint_overwrite = false oom_kill_disable = false disable_cache = false volumes = [&amp;#34;/home/hugo/.docker/config.json:/root/.docker/config.json:ro&amp;#34;,&amp;#34;/var/run/docker.sock:/var/run/docker.sock&amp;#34;, &amp;#34;/data/gitlab-runner/cache:/home/gitlab-runner/cache&amp;#34;] shm_size = 0 cache_dir = &amp;#34;/home/gitlab-runner/cache&amp;#34; .</description>
    </item>
    <item>
      <title>在树莓派上运行Docker</title>
      <link>https://blog.hugozhu.site/post/2015/60-run-docker-on-raspberry-pi/</link>
      <pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate><author>hugozhu@gmail.com (Hugo Zhu)</author>
      <guid>https://blog.hugozhu.site/post/2015/60-run-docker-on-raspberry-pi/</guid>
      <description>Docker Docker是目前非常流行的代码运行容器，操作系统虚拟化，运维自动化架构和开源的解决方案。&#xA;Docker的基础是Linux容器（LXC）技术，相比传统的VM虚拟化技术, LXC更轻量，性能更好。&#xA;Docker采用Golang语言开发，在LXC基础上Docker进行了封装，简化了容器的管理。&#xA;Docker还提供了一个标准(Dockerile)来实现软件部署环境代码化，全球的开发和运维工程师可以通过官方的Docker Hub仓库分享自己创建的镜像，使用者则可以快速的把系统和应用部署到自己的环境。&#xA;树莓派二代 树莓派二代的CPU有4核，运行速度是第一代的6倍，通过Docker快速部署开发环境，开发应用，再把开发好的系统通过镜像分享和发布出去也是非常有意义的事。因为树莓派的官方操作系统Raspbian并不支持Docker，本文主要介绍下如何在树莓派二代上运行Docker的几种方法。&#xA;Arch Linux ARM Arch Linux ARM 是由开源社区维护专为ARMv6（如树莓派一代）和 ARMv7（如树莓派二代, pcDuino3）等嵌入式硬件提供内核及软件支持的Linux发行版本。&#xA;在树莓派上安装Arch Linux和Raspbian略有不同，详细步骤可以看参考链接4。 总得来说是你需要在SD卡上分两个区并格式化，一个是FAT 32(LBA)格式的引导分区(/boot)，另一个是系统根分区（/root）。然后把下载下来的文件解开来复制到这两个分区就可以了。&#xA;你也可以只在SD卡上放/boot分区（这样可以用较小的如1G的SD卡引导树莓派），在U盘上放根分区，通过USB扩展存储可以允许你存放很多的镜像文件。&#xA;安装好Arch Linux后，参考这篇文章做完基础设置。&#xA;安装docker pacman -S docker 目前安装好的版本是1.5&#xA;开机自动docker systemctl enable docker 把登录用户加到docker组 这样不需要root也能执行docker了&#xA;gpasswd -a &amp;lt;your_login&amp;gt; docker 执行docker Docker Hub上搜索rpi已经可以找到不少适合Raspberry Pi运行的镜像了，热心网友都是棒棒哒。&#xA;[hugo@alarmpi ~]$ docker -v Docker version 1.5.0, build a8a31e [hugo@alarmpi ~]$ docker search rpi NAME DESCRIPTION STARS OFFICIAL AUTOMATED resin/rpi-raspbian Base image for the Raspberry Pi. Contains .</description>
    </item>
  </channel>
</rss>
