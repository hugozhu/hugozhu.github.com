<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on All about Raspberry Pi</title><link>https://blog.hugozhu.site/tags/docker/</link><description>Recent content in Docker on All about Raspberry Pi</description><generator>Hugo</generator><language>en</language><managingEditor>hugozhu@gmail.com (Hugo Zhu)</managingEditor><webMaster>hugozhu@gmail.com (Hugo Zhu)</webMaster><lastBuildDate>Sat, 04 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.hugozhu.site/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>使用tailscale+openwrt+docker将异地两机房组成一个局域网</title><link>https://blog.hugozhu.site/post/2025/82-tailscale-vpn-with-openwrt-in-docker/</link><pubDate>Sat, 04 Jan 2025 00:00:00 +0000</pubDate><author>hugozhu@gmail.com (Hugo Zhu)</author><guid>https://blog.hugozhu.site/post/2025/82-tailscale-vpn-with-openwrt-in-docker/</guid><description>在现代网络环境中，将位于不同地理位置的两个数据中心组成一个虚拟局域网，可以有效提升资源共享和管理效率。本文将介绍如何在 Docker 中使用 macvlan 网络模式安装 OpenWrt，并通过 Tailscale 实现异地数据中心的互联。
工具简介 Docker：开源的容器化平台，用于自动化应用程序的部署和管理。
macvlan：Docker 提供的一种网络驱动，使容器能够直接与宿主机的物理网络接口通信，获得独立的 IP 地址。
OpenWrt：开源的嵌入式操作系统，常用于路由器，提供强大的网络功能和可定制性。
Tailscale：基于 WireGuard 的虚拟专用网络（VPN）解决方案，能够轻松实现设备间的安全互联，适用于不同网络环境的设备组成虚拟局域网。
实现步骤 1. 在 Docker 中安装 OpenWrt 并配置 macvlan 网络 确认宿主机网络接口名称：
使用以下命令查看宿主机的网络接口名称（例如，eth0）：
ifconfig 设置网卡混杂模式：
启用宿主机网卡的混杂模式，以允许 macvlan 正常工作：
ip link set eth0 promisc on 创建 macvlan 网络并启动 OpenWrt 容器：
使用docker-compose根据下面的配置创建 macvlan 网络并启动 OpenWrt 容器，假设主路由ip: 192.168.1.1 ，openwrt容器ip: 192.168.1.11
docker network create -d macvlan --subnet=192.168.1.0/24 --gateway=192.168.1.1 -o parent=end0 macnet docker-compose.yaml
version: &amp;lsquo;2.4&amp;rsquo; services: openwrt: container_name: openwrt_2025 image: piaoyizy/openwrt-aarch64:latest privileged: true ports: - 80:80 env_file: - .</description></item><item><title>使用acme_docker自动更新免费域名证书</title><link>https://blog.hugozhu.site/post/2024/76-acme-docker-auto-uptime/</link><pubDate>Sun, 07 Jul 2024 00:00:00 +0000</pubDate><author>hugozhu@gmail.com (Hugo Zhu)</author><guid>https://blog.hugozhu.site/post/2024/76-acme-docker-auto-uptime/</guid><description>&lt;h2 id="问题和解决方案">问题和解决方案&lt;/h2>
&lt;ol>
&lt;li>免费域名证书需要三个月更新一次&lt;/li>
&lt;li>解决方案：apisix, docker, acme.sh, dnspod&lt;/li>
&lt;/ol></description></item><item><title>R2S妙用：Armbian + docker + openwrt + hostapd，用USB网卡做热点，无线有线接入都通过openwrt做路由</title><link>https://blog.hugozhu.site/post/2024/74-armbian-bridge-network-hostapd/</link><pubDate>Sun, 30 Jun 2024 00:00:00 +0000</pubDate><author>hugozhu@gmail.com (Hugo Zhu)</author><guid>https://blog.hugozhu.site/post/2024/74-armbian-bridge-network-hostapd/</guid><description>&lt;h2 id="背景">背景&lt;/h2>
&lt;p>Armbian 是一款基于 Debian 或 Ubuntu 的开源操作系统，专门针对嵌入式 ARM 平台进行优化和定制。它可以运行在多种不同的嵌入式设备上，例如树莓派、R2S，R4S，玩客云等等。Armbian 针对不同的嵌入式平台，提供了相应的硬件支持，可以让用户轻松地在这些平台上搭建自己的嵌入式系统。&lt;/p>
&lt;p>刚好有一块闲置了几年的R2S卡片机和树莓派2时代的无线网卡。&lt;/p></description></item><item><title>用Gitlab Runner来打包并上传Harbor</title><link>https://blog.hugozhu.site/post/2022/71-gitlab-runner-using-docker-build/</link><pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate><author>hugozhu@gmail.com (Hugo Zhu)</author><guid>https://blog.hugozhu.site/post/2022/71-gitlab-runner-using-docker-build/</guid><description>&lt;p>&lt;a href="https://docs.gitlab.com/ee/ci/docker/using_docker_build.html">https://docs.gitlab.com/ee/ci/docker/using_docker_build.html&lt;/a>&lt;/p></description></item><item><title>在树莓派上运行Docker</title><link>https://blog.hugozhu.site/post/2015/60-run-docker-on-raspberry-pi/</link><pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate><author>hugozhu@gmail.com (Hugo Zhu)</author><guid>https://blog.hugozhu.site/post/2015/60-run-docker-on-raspberry-pi/</guid><description>&lt;h1 id="docker">Docker&lt;/h1>
&lt;p>Docker是目前非常流行的代码运行容器，操作系统虚拟化，运维自动化架构和开源的解决方案。&lt;/p>
&lt;p>Docker的基础是Linux容器（LXC）技术，相比传统的VM虚拟化技术, LXC更轻量，性能更好。&lt;/p>
&lt;p>Docker采用Golang语言开发，在LXC基础上Docker进行了封装，简化了容器的管理。&lt;/p></description></item></channel></rss>