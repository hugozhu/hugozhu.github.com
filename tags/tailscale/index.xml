<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tailscale on All about Raspberry Pi</title><link>https://blog.hugozhu.site/tags/tailscale/</link><description>Recent content in Tailscale on All about Raspberry Pi</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 18 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.hugozhu.site/tags/tailscale/index.xml" rel="self" type="application/rss+xml"/><item><title>通过Tailscale Derp节点的公网和私网IP高性能打通网络</title><link>https://blog.hugozhu.site/post/2025/89-tailscale-derp-node-with-two-ip-address/</link><pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate><guid>https://blog.hugozhu.site/post/2025/89-tailscale-derp-node-with-two-ip-address/</guid><description>&lt;h1 id="通过-tailscale-derp-节点的公网和私网-ip-高性能打通网络">通过 Tailscale Derp 节点的公网和私网 IP 高性能打通网络&lt;/h1>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>Tailscale 是一个基于 WireGuard 的零配置 VPN 方案，使用官方 Derp（Distributed Exit Relay Protocol）中继服务器可以轻松穿透 NAT 进行设备互联。但在特定场景下，例如企业内网或跨地域机房互联时，默认的 Derp 可能不是最优解。本文介绍如何通过配置自建 Derp 服务器，使 A 网络解析为内网 IP，B 网络解析为公网 IP，实现高性能互联。&lt;/p>
&lt;h2 id="方案概述">方案概述&lt;/h2>
&lt;p>在 Tailscale 网络中，不同节点可以通过自定义 Derp 服务器进行中继通信。如果 A 机器位于内网，而 B 机器在公网，则可以利用 DNS 解析策略，让 A 解析为私网 IP，B 解析为公网 IP，从而优化连接路径，提高数据传输性能。&lt;/p>
&lt;h2 id="配置示例">配置示例&lt;/h2>
&lt;p>在 Tailscale 的 &lt;code>derpMap&lt;/code> 配置中，我们可以设定一个自建 Derp 服务器，并分别指定其公网和私网地址。示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;derpMap&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;OmitDefaultRegions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#只连自建derp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;Regions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;900&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;RegionID&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">900&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;RegionCode&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;hk1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;RegionName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;HHO HK CEN&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;Nodes&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;Name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;derp01&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;HostName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;derp01.yourmain.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;RegionID&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">900&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;DERPPort&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">443&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;STUNPort&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3478&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;InsecureForTests&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在derp节点上抓包测试验证：&lt;/p></description></item><item><title>Tailscale Exit Node</title><link>https://blog.hugozhu.site/post/2025/88-tailscale-exit-node-on-docker/</link><pubDate>Wed, 12 Mar 2025 00:00:00 +0000</pubDate><guid>https://blog.hugozhu.site/post/2025/88-tailscale-exit-node-on-docker/</guid><description>&lt;p>&lt;a href="https://tailscale.com/">Tailscale&lt;/a> 是基于 WireGuard 的零配置 VPN 解决方案，可以轻松创建私有网络，让设备之间实现安全连接。而 &lt;strong>Exit Node（出口节点）&lt;/strong> 功能允许你将某台设备作为所有流量的出口，就像 VPN 一样，帮助你绕过网络限制或访问受地理位置限制的内容。&lt;/p></description></item><item><title>通过wifi热点接入tailscale网络</title><link>https://blog.hugozhu.site/post/2025/87-tailscale-to-ap/</link><pubDate>Mon, 27 Jan 2025 00:00:00 +0000</pubDate><guid>https://blog.hugozhu.site/post/2025/87-tailscale-to-ap/</guid><description>&lt;p>tailscale docker容器做为局域网的网关，可以让局域网内的设备无需安装tailscale客户端即可访问tailscale网络内的其他设备。
提升了便利性，安全性通过局域网访问控制来保障。&lt;/p>
&lt;p>适用场景：&lt;/p>
&lt;ul>
&lt;li>你的 Tailscale 容器充当 VPN 代理，让设备通过它访问互联网。&lt;/li>
&lt;li>你希望本机（或其他 Docker 容器）能够访问 Tailscale 网络中的设备。&lt;/li>
&lt;/ul></description></item><item><title>最简单的异地组网方案</title><link>https://blog.hugozhu.site/post/2025/86-tailscale-docker/</link><pubDate>Sun, 26 Jan 2025 00:00:00 +0000</pubDate><guid>https://blog.hugozhu.site/post/2025/86-tailscale-docker/</guid><description>&lt;p>前面介绍了使用openwrt来跑tailscale，比较合适硬路由，更简单更通用的方法是官方的用tailscale docker镜像来搭建。&lt;/p></description></item><item><title>通过主路由的路由分流策略将异地内网流量转发到docker里的openwrt</title><link>https://blog.hugozhu.site/post/2025/84-use-route-rules-to-redirect-traffic/</link><pubDate>Fri, 24 Jan 2025 00:00:00 +0000</pubDate><guid>https://blog.hugozhu.site/post/2025/84-use-route-rules-to-redirect-traffic/</guid><description>&lt;p>在之前的文章中，我们已经介绍了如何通过 Docker 启动一个内置 Tailscale 的 OpenWrt。本文将进一步介绍如何结合主路由的智能路由策略，将异地内网流量高效转发到这个 OpenWrt 实例中，实现异地内网的无缝互联。&lt;/p></description></item><item><title>构建可通过IP访问的tailscale的derp relay节点</title><link>https://blog.hugozhu.site/post/2025/83-tailscale-derp-node-with-ip/</link><pubDate>Fri, 10 Jan 2025 00:00:00 +0000</pubDate><guid>https://blog.hugozhu.site/post/2025/83-tailscale-derp-node-with-ip/</guid><description>&lt;p>虽然tailscale用了很多NAT穿透 &lt;a href="https://zh.wikipedia.org/zh-cn/NAT%E7%A9%BF%E9%80%8F">NAT traversal&lt;/a>技术，但仍然会有不能P2P自连的情况，这时候tailscale就会使用最近的derp节点来建立连接，自建derper可用于加速tailscale网络的连通性能&lt;/p></description></item><item><title>使用tailscale+openwrt+docker+macvlan将异地两机房组成一个局域网</title><link>https://blog.hugozhu.site/post/2025/82-tailscale-vpn-with-openwrt-in-docker/</link><pubDate>Sat, 04 Jan 2025 00:00:00 +0000</pubDate><guid>https://blog.hugozhu.site/post/2025/82-tailscale-vpn-with-openwrt-in-docker/</guid><description>&lt;p>在现代网络环境中，将位于不同地理位置的两个数据中心组成一个虚拟局域网，可以有效提升资源共享和管理效率。本文将介绍如何在 Docker 中使用 macvlan 网络模式安装 OpenWrt，并通过 Tailscale 实现异地数据中心的互联。&lt;/p></description></item></channel></rss>