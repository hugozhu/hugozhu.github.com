<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>文章翻译 on All about Raspberry Pi</title><link>https://blog.hugozhu.site/tags/%E6%96%87%E7%AB%A0%E7%BF%BB%E8%AF%91/</link><description>Recent content in 文章翻译 on All about Raspberry Pi</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 28 Mar 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.hugozhu.site/tags/%E6%96%87%E7%AB%A0%E7%BF%BB%E8%AF%91/index.xml" rel="self" type="application/rss+xml"/><item><title>并发编程之内存屏障</title><link>https://blog.hugozhu.site/post/2013/22-memory-barriers-or-fences/</link><pubDate>Thu, 28 Mar 2013 00:00:00 +0000</pubDate><guid>https://blog.hugozhu.site/post/2013/22-memory-barriers-or-fences/</guid><description>&lt;p>原文地址：&lt;a href="http://mechanical-sympathy.blogspot.com/2011/07/memory-barriersfences.html">&lt;code>http://mechanical-sympathy.blogspot.com/2011/07/memory-barriersfences.html&lt;/code>&lt;/a> 或 &lt;a href="http://ifeve.com/memory-barriersfences/">&lt;code>http://ifeve.com/memory-barriersfences/&lt;/code>&lt;/a>&lt;/p>
&lt;p>关键词：Load Barrier, Store Barrier, Full Barrier&lt;/p>
&lt;p>本文我将和大家讨论并发编程中最基础的一项技术：内存屏障或内存栅栏，也就是让一个CPU处理单元中的内存状态对其它处理单元可见的一项技术。&lt;/p>
&lt;p>CPU使用了很多优化技术来达成一个事实：CPU执行单元的速度要远超主存访问速度。在我上一篇文章 &amp;ldquo;Write Combing - 合并写&amp;quot;中我已经介绍了其中的一项技术。CPU避免内存访问延迟最常见的技术是将指令管道化，然后尽量重排这些管道的执行以最大利用缓存而把因为缓存未命中引起的延迟降到最小。&lt;/p>
&lt;p>当一个程序执行时指令是否被重排并不重要，只要最终的结果是一样的。例如，在一个循环里，如果循环体内没用到这个计数器，循环的计数器什么时候更新（在循环开始，中间还是最后）并不重要。编译器和CPU可以自由的重排指令以最佳的利用CPU，只要下一次循环前更新该计数器即可。并且在循环执行中，这个变量可能一直存在寄存器上，并没有被推到缓存或主存，这样这个变量对其他CPU来说一直都是不可见的。&lt;/p>
&lt;p>CPU核内部包含了多个执行单元。例如，现代Intel CPU包含了6个执行单元，可以组合进行算术运算，逻辑条件判断及内存操作。每个执行单元可以执行上述任务的某种组合。这些执行单元是并行执行的，这样指令也就是在并行执行。但如果站在另一个CPU角度看，这也就产生了程序顺序的另一种不确定性。&lt;/p>
&lt;p>最后，当一个缓存失效发生时，现代CPU可以先假设一个内存载入的值并根据这个假设值继续执行，直到内存载入返回确切的值。&lt;/p>
&lt;img src="http://ifeve.com/wp-content/uploads/2013/03/cpu.png"/>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">CPU核
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> V
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">寄存器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> V
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">执行单元 -&amp;gt; Load/Store缓冲区-&amp;gt;L1 Cache ---&amp;gt;L3 Cache--&amp;gt;内存控制器--&amp;gt;主存
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +-&amp;gt; Write Combine缓冲区-&amp;gt;L2 Cache ---+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>代码顺序并不是真正的执行顺序，CPU和编译器可以各种优化只要有空间提高性能。缓存和主存的读取会利用load, store和write-combining缓冲区来缓冲和重排。这些缓冲区是查找速度很快的关联队列，当一个后来发生的load需要读取上一个store的值，而该值还没有到达缓存，查找是必需的，上图描绘的是一个简化的现代多核CPU，从上图可以看出执行单元可以利用本地寄存器和缓冲区来管理和缓存子系统的交互。&lt;/p>
&lt;p>在多线程环境里需要使用技术来使得程序结果尽快可见。这篇文章里我不会涉及到 Cache Conherence 的概念。请先假定一个事实：一旦内存数据被推送到缓存，就会有消息协议来确保所有的缓存会对所有的共享数据同步并保持一致。这个使内存数据对CPU核可见的技术被称为内存屏障或内存栅栏。&lt;/p>
&lt;p>内存屏障提供了两个功能。首先，它们通过确保从另一个CPU来看屏障的两边的所有指令都是正确的程序顺序，而保持程序顺序的外部可见性；其次它们可以实现内存数据可见性，确保内存数据会同步到CPU缓存子系统。&lt;/p>
&lt;p>大多数的内存屏障都是复杂的话题。在不同的CPU架构上内存屏障的实现非常不一样。相对来说Intel CPU的强内存模型比DEC Alpha的弱复杂内存模型（缓存不仅分层了，还分区了）更简单。因为x86处理器是在多线程编程中最常见的，下面我尽量用x86的架构来阐述。&lt;/p>
&lt;h1 id="store-barrier">Store Barrier&lt;/h1>
&lt;p>Store屏障，是x86的&amp;rdquo;&lt;strong>sfence&lt;/strong>&amp;ldquo;指令，强制所有在store屏障指令之前的store指令，都在该store屏障指令执行之前被执行，并把store缓冲区的数据都刷到CPU缓存。这会使得程序状态对其它CPU可见，这样其它CPU可以根据需要介入。一个实际的好例子是Disruptor中的&lt;a href="http://code.google.com/p/disruptor/source/browse/trunk/code/src/main/com/lmax/disruptor/BatchEventProcessor.java">BatchEventProcessor&lt;/a>。当序列Sequence被一个消费者更新时，其它消费者(Consumers)和生产者（Producers）知道该消费者的进度，因此可以采取合适的动作。所以屏障之前发生的内存更新都可见了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">private volatile long sequence = RingBuffer.INITIAL_CURSOR_VALUE;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// from inside the run() method
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">T event = null;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">long nextSequence = sequence.get() + 1L;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">while (running)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> try
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final long availableSequence = barrier.waitFor(nextSequence);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> while (nextSequence &amp;lt;= availableSequence)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> event = ringBuffer.get(nextSequence);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> boolean endOfBatch = nextSequence == availableSequence;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> eventHandler.onEvent(event, nextSequence, endOfBatch);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> nextSequence++;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sequence.set(nextSequence - 1L); 
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // store barrier inserted here !!!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> catch (final Exception ex)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> exceptionHandler.handle(ex, nextSequence, event);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sequence.set(nextSequence);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // store barrier inserted here !!!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> nextSequence++;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="load-barrier">Load Barrier&lt;/h1>
&lt;p>Load屏障，是x86上的&amp;rdquo;&lt;strong>ifence&lt;/strong>&amp;ldquo;指令，强制所有在load屏障指令之后的load指令，都在该load屏障指令执行之后被执行，并且一直等到load缓冲区被该CPU读完才能执行之后的load指令。这使得从其它CPU暴露出来的程序状态对该CPU可见，这之后CPU可以进行后续处理。一个好例子是上面的BatchEventProcessor的sequence对象是放在屏障后被生产者或消费者使用。&lt;/p></description></item></channel></rss>